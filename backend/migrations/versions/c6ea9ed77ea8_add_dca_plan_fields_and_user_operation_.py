"""add_dca_plan_fields_and_user_operation_dca_fields

Revision ID: c6ea9ed77ea8
Revises: 94e7ccaad3b2
Create Date: 2025-07-03 23:29:00.473853

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'c6ea9ed77ea8'
down_revision: Union[str, Sequence[str], None] = '94e7ccaad3b2'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('dca_plans', sa.Column('execution_time', sa.String(length=10), nullable=True))
    op.add_column('dca_plans', sa.Column('next_execution_date', sa.Date(), nullable=True))
    op.add_column('dca_plans', sa.Column('last_execution_date', sa.Date(), nullable=True))
    op.add_column('dca_plans', sa.Column('execution_count', sa.Integer(), nullable=True))
    op.add_column('dca_plans', sa.Column('total_invested', sa.DECIMAL(precision=15, scale=4), nullable=True))
    op.add_column('dca_plans', sa.Column('total_shares', sa.DECIMAL(precision=15, scale=8), nullable=True))
    op.add_column('dca_plans', sa.Column('smart_dca', sa.Boolean(), nullable=True))
    op.add_column('dca_plans', sa.Column('base_amount', sa.DECIMAL(precision=10, scale=2), nullable=True))
    op.add_column('dca_plans', sa.Column('max_amount', sa.DECIMAL(precision=10, scale=2), nullable=True))
    op.add_column('dca_plans', sa.Column('increase_rate', sa.DECIMAL(precision=5, scale=4), nullable=True))
    op.add_column('dca_plans', sa.Column('min_nav', sa.DECIMAL(precision=10, scale=4), nullable=True))
    op.add_column('dca_plans', sa.Column('max_nav', sa.DECIMAL(precision=10, scale=4), nullable=True))
    op.add_column('dca_plans', sa.Column('skip_holidays', sa.Boolean(), nullable=True))
    op.add_column('dca_plans', sa.Column('enable_notification', sa.Boolean(), nullable=True))
    op.add_column('dca_plans', sa.Column('notification_before', sa.Integer(), nullable=True))
    op.add_column('dca_plans', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.create_index('idx_fund_dividend_code', 'fund_dividend', ['fund_code'], unique=False)
    op.create_index('idx_fund_dividend_date', 'fund_dividend', ['dividend_date'], unique=False)
    op.add_column('user_operations', sa.Column('dca_plan_id', sa.Integer(), nullable=True))
    op.add_column('user_operations', sa.Column('dca_execution_type', sa.String(length=20), nullable=True))
    # 注意：SQLite不支持ALTER TABLE添加外键约束，这里移除外键约束创建
    # op.create_foreign_key(None, 'user_operations', 'dca_plans', ['dca_plan_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # op.drop_constraint(None, 'user_operations', type_='foreignkey')
    op.drop_column('user_operations', 'dca_execution_type')
    op.drop_column('user_operations', 'dca_plan_id')
    op.drop_index('idx_fund_dividend_date', table_name='fund_dividend')
    op.drop_index('idx_fund_dividend_code', table_name='fund_dividend')
    op.drop_column('dca_plans', 'updated_at')
    op.drop_column('dca_plans', 'notification_before')
    op.drop_column('dca_plans', 'enable_notification')
    op.drop_column('dca_plans', 'skip_holidays')
    op.drop_column('dca_plans', 'max_nav')
    op.drop_column('dca_plans', 'min_nav')
    op.drop_column('dca_plans', 'increase_rate')
    op.drop_column('dca_plans', 'max_amount')
    op.drop_column('dca_plans', 'base_amount')
    op.drop_column('dca_plans', 'smart_dca')
    op.drop_column('dca_plans', 'total_shares')
    op.drop_column('dca_plans', 'total_invested')
    op.drop_column('dca_plans', 'execution_count')
    op.drop_column('dca_plans', 'last_execution_date')
    op.drop_column('dca_plans', 'next_execution_date')
    op.drop_column('dca_plans', 'execution_time')
    # ### end Alembic commands ###
