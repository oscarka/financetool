#!/usr/bin/env python3
"""
Ê£ÄÊü•Ê±áÁéáË°®Êï∞ÊçÆ
"""
import os
import sys
from decimal import Decimal

# Ê∑ªÂä†backendÁõÆÂΩïÂà∞PythonË∑ØÂæÑ
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

from app.utils.database import get_db
from app.models.database import ExchangeRate, WiseExchangeRate

def check_exchange_rates():
    """Ê£ÄÊü•Ê±áÁéáË°®Êï∞ÊçÆ"""
    print("üí± Ê£ÄÊü•Ê±áÁéáË°®Êï∞ÊçÆ...")
    
    # Ëé∑ÂèñÊï∞ÊçÆÂ∫ì‰ºöËØù
    db = next(get_db())
    
    try:
        # Ê£ÄÊü•ExchangeRateË°®
        print("\nüìä 1. ExchangeRateË°®:")
        exchange_rates = db.query(ExchangeRate).all()
        print(f"   ÊÄªÊï∞: {len(exchange_rates)} Êù°")
        
        if exchange_rates:
            for i, rate in enumerate(exchange_rates[:10], 1):  # Âè™ÊòæÁ§∫Ââç10Êù°
                print(f"   {i}. {rate.from_currency} -> {rate.to_currency}: {rate.rate} (Êó•Êúü: {rate.rate_date})")
        else:
            print("   ‚ö†Ô∏è  Ë°®‰∏≠Ê≤°ÊúâÊ±áÁéáÊï∞ÊçÆ")
        
        # Ê£ÄÊü•WiseExchangeRateË°®
        print("\nüìä 2. WiseExchangeRateË°®:")
        wise_rates = db.query(WiseExchangeRate).all()
        print(f"   ÊÄªÊï∞: {len(wise_rates)} Êù°")
        
        if wise_rates:
            for i, rate in enumerate(wise_rates[:10], 1):  # Âè™ÊòæÁ§∫Ââç10Êù°
                print(f"   {i}. {rate.source_currency} -> {rate.target_currency}: {rate.rate} (Êó∂Èó¥: {rate.time})")
        else:
            print("   ‚ö†Ô∏è  Ë°®‰∏≠Ê≤°ÊúâÊ±áÁéáÊï∞ÊçÆ")
        
        # Ê£ÄÊü•ÈúÄË¶ÅÁöÑÊ±áÁéáÂØπ
        print("\nüîç 3. ÈúÄË¶ÅÁöÑÊ±áÁéáÂØπ:")
        needed_pairs = [
            ('JPY', 'CNY'), ('AUD', 'CNY'), ('EUR', 'CNY'), 
            ('USD', 'CNY'), ('HKD', 'CNY'), ('ETH', 'CNY'),
            ('BTC', 'CNY'), ('USDT', 'CNY'), ('USDC', 'CNY')
        ]
        
        for from_cur, to_cur in needed_pairs:
            # Ê£ÄÊü•ExchangeRateË°®
            rate1 = db.query(ExchangeRate).filter(
                ExchangeRate.from_currency == from_cur,
                ExchangeRate.to_currency == to_cur
            ).first()
            
            # Ê£ÄÊü•WiseExchangeRateË°®
            rate2 = db.query(WiseExchangeRate).filter(
                WiseExchangeRate.source_currency == from_cur,
                WiseExchangeRate.target_currency == to_cur
            ).first()
            
            status = "‚ùå Áº∫Â§±"
            if rate1:
                status = f"‚úÖ ExchangeRate: {rate1.rate}"
            elif rate2:
                status = f"‚úÖ WiseExchangeRate: {rate2.rate}"
            
            print(f"   {from_cur} -> {to_cur}: {status}")
        
    except Exception as e:
        print(f"‚ùå Ê£ÄÊü•Â§±Ë¥•: {e}")
    finally:
        db.close()

if __name__ == "__main__":
    check_exchange_rates()